[[package]]
name = "annotated-types"
version = "0.7.0"
description = "Reusable constraint types to use with typing.Annotated"
category = "main"
optional = false
python-versions = ">=3.8"

[[package]]
name = "anyio"
version = "4.9.0"
description = "High level compatibility layer for multiple asynchronous event loop implementations"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
exceptiongroup = {version = ">=1.0.2", markers = "python_version < \"3.11\""}
idna = ">=2.8"
sniffio = ">=1.1"
typing_extensions = {version = ">=4.5", markers = "python_version < \"3.13\""}

[package.extras]
trio = ["trio (>=0.26.1)"]
test = ["anyio", "blockbuster (>=1.5.23)", "coverage[toml] (>=7)", "exceptiongroup (>=1.2.0)", "hypothesis (>=4.0)", "psutil (>=5.9)", "pytest (>=7.0)", "trustme", "truststore (>=0.9.1)", "uvloop (>=0.21)"]
doc = ["packaging", "Sphinx (>=8.2,<9.0)", "sphinx-rtd-theme", "sphinx-autodoc-typehints (>=1.2.0)"]

[[package]]
name = "black"
version = "23.12.1"
description = "The uncompromising code formatter."
category = "dev"
optional = false
python-versions = ">=3.8"

[package.dependencies]
click = ">=8.0.0"
mypy-extensions = ">=0.4.3"
packaging = ">=22.0"
pathspec = ">=0.9.0"
platformdirs = ">=2"
tomli = {version = ">=1.1.0", markers = "python_version < \"3.11\""}
typing-extensions = {version = ">=4.0.1", markers = "python_version < \"3.11\""}

[package.extras]
colorama = ["colorama (>=0.4.3)"]
d = ["aiohttp (>=3.7.4,!=3.9.0)", "aiohttp (>=3.7.4)"]
jupyter = ["ipython (>=7.8.0)", "tokenize-rt (>=3.2.0)"]
uvloop = ["uvloop (>=0.15.2)"]

[[package]]
name = "cachetools"
version = "5.5.2"
description = "Extensible memoizing collections and decorators"
category = "main"
optional = false
python-versions = ">=3.7"

[[package]]
name = "certifi"
version = "2025.4.26"
description = "Python package for providing Mozilla's CA Bundle."
category = "main"
optional = false
python-versions = ">=3.6"

[[package]]
name = "charset-normalizer"
version = "3.4.2"
description = "The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet."
category = "main"
optional = false
python-versions = ">=3.7"

[[package]]
name = "click"
version = "8.2.0"
description = "Composable command line interface toolkit"
category = "dev"
optional = false
python-versions = ">=3.10"

[package.dependencies]
colorama = {version = "*", markers = "platform_system == \"Windows\""}

[[package]]
name = "colorama"
version = "0.4.6"
description = "Cross-platform colored terminal text."
category = "main"
optional = false
python-versions = "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7"

[[package]]
name = "distlib"
version = "0.3.9"
description = "Distribution utilities"
category = "dev"
optional = false
python-versions = "*"

[[package]]
name = "docstring-parser"
version = "0.16"
description = "Parse Python docstrings in reST, Google and Numpydoc format"
category = "main"
optional = false
python-versions = ">=3.6,<4.0"

[[package]]
name = "exceptiongroup"
version = "1.3.0"
description = "Backport of PEP 654 (exception groups)"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
typing-extensions = {version = ">=4.6.0", markers = "python_version < \"3.13\""}

[package.extras]
test = ["pytest (>=6)"]

[[package]]
name = "filelock"
version = "3.18.0"
description = "A platform independent file lock."
category = "dev"
optional = false
python-versions = ">=3.9"

[package.extras]
docs = ["furo (>=2024.8.6)", "sphinx-autodoc-typehints (>=3)", "sphinx (>=8.1.3)"]
testing = ["covdefaults (>=2.3)", "coverage (>=7.6.10)", "diff-cover (>=9.2.1)", "pytest-asyncio (>=0.25.2)", "pytest-cov (>=6)", "pytest-mock (>=3.14)", "pytest-timeout (>=2.3.1)", "pytest (>=8.3.4)", "virtualenv (>=20.28.1)"]
typing = ["typing-extensions (>=4.12.2)"]

[[package]]
name = "flake8"
version = "7.2.0"
description = "the modular source code checker: pep8 pyflakes and co"
category = "dev"
optional = false
python-versions = ">=3.9"

[package.dependencies]
mccabe = ">=0.7.0,<0.8.0"
pycodestyle = ">=2.13.0,<2.14.0"
pyflakes = ">=3.3.0,<3.4.0"

[[package]]
name = "google-api-core"
version = "2.24.2"
description = "Google API client core library"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
google-auth = ">=2.14.1,<3.0.0"
googleapis-common-protos = ">=1.56.2,<2.0.0"
grpcio = [
    {version = ">=1.33.2,<2.0dev", optional = true, markers = "extra == \"grpc\""},
    {version = ">=1.49.1,<2.0dev", optional = true, markers = "python_version >= \"3.11\" or python_version >= \"3.11\" and extra == \"grpc\""},
]
grpcio-status = [
    {version = ">=1.33.2,<2.0.dev0", optional = true, markers = "extra == \"grpc\""},
    {version = ">=1.49.1,<2.0.dev0", optional = true, markers = "python_version >= \"3.11\" or python_version >= \"3.11\" and extra == \"grpc\""},
]
proto-plus = [
    {version = ">=1.22.3,<2.0.0", markers = "python_version < \"3.13\""},
    {version = ">=1.25.0,<2.0.0", markers = "python_version >= \"3.13\""},
]
protobuf = ">=3.19.5,<3.20.0 || >3.20.0,<3.20.1 || >3.20.1,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0"
requests = ">=2.18.0,<3.0.0"

[package.extras]
async-rest = ["google-auth[aiohttp] (>=2.35.0,<3.0.dev0)"]
grpc = ["grpcio (>=1.33.2,<2.0dev)", "grpcio-status (>=1.33.2,<2.0.dev0)", "grpcio (>=1.49.1,<2.0dev)", "grpcio-status (>=1.49.1,<2.0.dev0)"]
grpcgcp = ["grpcio-gcp (>=0.2.2,<1.0.dev0)"]
grpcio-gcp = ["grpcio-gcp (>=0.2.2,<1.0.dev0)"]

[[package]]
name = "google-auth"
version = "2.40.1"
description = "Google Authentication Library"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
cachetools = ">=2.0.0,<6.0"
pyasn1-modules = ">=0.2.1"
rsa = ">=3.1.4,<5"

[package.extras]
aiohttp = ["aiohttp (>=3.6.2,<4.0.0)", "requests (>=2.20.0,<3.0.0)"]
enterprise-cert = ["cryptography", "pyopenssl"]
pyjwt = ["pyjwt (>=2.0)", "cryptography (>=38.0.3)", "cryptography (<39.0.0)"]
pyopenssl = ["pyopenssl (>=20.0.0)", "cryptography (>=38.0.3)", "cryptography (<39.0.0)"]
reauth = ["pyu2f (>=0.1.5)"]
requests = ["requests (>=2.20.0,<3.0.0)"]
testing = ["grpcio", "flask", "freezegun", "mock", "oauth2client", "pyjwt (>=2.0)", "cryptography (>=38.0.3)", "pytest", "pytest-cov", "pytest-localserver", "pyopenssl (>=20.0.0)", "pyu2f (>=0.1.5)", "responses", "urllib3", "packaging", "aiohttp (>=3.6.2,<4.0.0)", "requests (>=2.20.0,<3.0.0)", "aioresponses", "pytest-asyncio", "pyopenssl (<24.3.0)", "aiohttp (<3.10.0)", "cryptography (<39.0.0)"]
urllib3 = ["urllib3", "packaging"]

[[package]]
name = "google-cloud-aiplatform"
version = "1.92.0"
description = "Vertex AI API client library"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
docstring-parser = "<1"
google-api-core = {version = ">=1.34.1,<2.0.0 || >=2.8.0,<3.0.0", extras = ["grpc"]}
google-auth = ">=2.14.1,<3.0.0"
google-cloud-bigquery = ">=1.15.0,<3.20.0 || >3.20.0,<4.0.0"
google-cloud-resource-manager = ">=1.3.3,<3.0.0"
google-cloud-storage = ">=1.32.0,<3.0.0"
google-genai = ">=1.0.0,<2.0.0"
packaging = ">=14.3"
proto-plus = ">=1.22.3,<2.0.0"
protobuf = ">=3.20.2,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0"
pydantic = "<3"
shapely = "<3.0.0"
typing-extensions = "*"

[package.extras]
adk = ["google-adk (>=0.0.2)"]
ag2 = ["ag2", "openinference-instrumentation-autogen (>=0.1.6,<0.2)"]
ag2-testing = ["ag2", "opentelemetry-sdk (<2)", "pytest-xdist", "cloudpickle (>=3.0,<4.0)", "pydantic (>=2.11.1,<3)", "google-cloud-trace (<2)", "openinference-instrumentation-autogen (>=0.1.6,<0.2)", "opentelemetry-exporter-gcp-trace (<2)", "absl-py", "typing-extensions"]
agent-engines = ["packaging (>=24.0)", "cloudpickle (>=3.0,<4.0)", "google-cloud-trace (<2)", "google-cloud-logging (<4)", "opentelemetry-sdk (<2)", "opentelemetry-exporter-gcp-trace (<2)", "pydantic (>=2.11.1,<3)", "typing-extensions"]
autologging = ["mlflow (>=1.27.0,<=2.16.0)"]
cloud-profiler = ["tensorboard-plugin-profile (>=2.4.0,<2.18.0)", "werkzeug (>=2.0.0,<4.0.0)", "tensorflow (>=2.4.0,<3.0.0)"]
datasets = ["pyarrow (>=3.0.0,<8.0.0)", "pyarrow (>=10.0.1)", "pyarrow (>=14.0.0)"]
endpoint = ["requests (>=2.28.1)", "requests-toolbelt (<=1.0.0)"]
evaluation = ["pandas (>=1.0.0)", "tqdm (>=4.23.0)", "jsonschema", "ruamel.yaml", "scikit-learn (<1.6.0)", "scikit-learn"]
full = ["jsonschema", "explainable-ai-sdk (>=1.0.0)", "werkzeug (>=2.0.0,<4.0.0)", "uvicorn[standard] (>=0.16.0)", "fastapi (>=0.71.0,<=0.114.0)", "tensorflow (>=2.3.0,<3.0.0)", "google-cloud-bigquery-storage", "mlflow (>=1.27.0,<=2.16.0)", "setuptools (<70.0.0)", "immutabledict", "google-cloud-bigquery", "docker (>=5.0.3)", "httpx (>=0.23.0,<=0.28.1)", "starlette (>=0.17.1)", "urllib3 (>=1.21.1,<1.27)", "pyyaml (>=5.3.1,<7)", "requests-toolbelt (<=1.0.0)", "google-vizier (>=0.1.6)", "pandas (>=1.0.0)", "tensorboard-plugin-profile (>=2.4.0,<2.18.0)", "lit-nlp (==0.4.0)", "requests (>=2.28.1)", "pyarrow (>=6.0.1)", "tensorflow (>=2.4.0,<3.0.0)", "ruamel.yaml", "numpy (>=1.15.0)", "tqdm (>=4.23.0)", "ray[default] (>=2.4,<2.5.0 || >2.9.0,!=2.9.1,!=2.9.2,<2.10.0 || >=2.33.0,<2.34.0 || 2.42.0)", "pyarrow (>=3.0.0,<8.0.0)", "scikit-learn (<1.6.0)", "tensorflow (>=2.3.0,<3.0.0)", "ray[default] (>=2.5,<=2.42.0)", "pyarrow (>=10.0.1)", "scikit-learn", "pyarrow (>=14.0.0)"]
langchain = ["langchain (>=0.3,<0.4)", "langchain-core (>=0.3,<0.4)", "langchain-google-vertexai (>=2,<3)", "langgraph (>=0.2.45,<0.4)", "openinference-instrumentation-langchain (>=0.1.19,<0.2)"]
langchain-testing = ["langgraph (>=0.2.45,<0.4)", "langchain-google-vertexai (>=2,<3)", "langchain (>=0.3,<0.4)", "opentelemetry-sdk (<2)", "pytest-xdist", "cloudpickle (>=3.0,<4.0)", "pydantic (>=2.11.1,<3)", "google-cloud-trace (<2)", "opentelemetry-exporter-gcp-trace (<2)", "absl-py", "langchain-core (>=0.3,<0.4)", "openinference-instrumentation-langchain (>=0.1.19,<0.2)", "typing-extensions"]
lit = ["tensorflow (>=2.3.0,<3.0.0)", "pandas (>=1.0.0)", "lit-nlp (==0.4.0)", "explainable-ai-sdk (>=1.0.0)"]
llama-index = ["llama-index", "llama-index-llms-google-genai", "openinference-instrumentation-llama-index (>=3.0,<4.0)"]
llama-index-testing = ["openinference-instrumentation-llama-index (>=3.0,<4.0)", "opentelemetry-sdk (<2)", "llama-index-llms-google-genai", "pytest-xdist", "cloudpickle (>=3.0,<4.0)", "llama-index", "google-cloud-trace (<2)", "opentelemetry-exporter-gcp-trace (<2)", "pydantic (>=2.11.1,<3)", "absl-py", "typing-extensions"]
metadata = ["pandas (>=1.0.0)", "numpy (>=1.15.0)"]
pipelines = ["pyyaml (>=5.3.1,<7)"]
prediction = ["docker (>=5.0.3)", "fastapi (>=0.71.0,<=0.114.0)", "httpx (>=0.23.0,<=0.28.1)", "starlette (>=0.17.1)", "uvicorn[standard] (>=0.16.0)"]
private-endpoints = ["urllib3 (>=1.21.1,<1.27)", "requests (>=2.28.1)"]
ray = ["setuptools (<70.0.0)", "google-cloud-bigquery-storage", "google-cloud-bigquery", "pandas (>=1.0.0)", "pyarrow (>=6.0.1)", "immutabledict", "ray[default] (>=2.4,<2.5.0 || >2.9.0,!=2.9.1,!=2.9.2,<2.10.0 || >=2.33.0,<2.34.0 || 2.42.0)", "ray[default] (>=2.5,<=2.42.0)"]
ray-testing = ["setuptools (<70.0.0)", "google-cloud-bigquery-storage", "google-cloud-bigquery", "pandas (>=1.0.0)", "pyarrow (>=6.0.1)", "immutabledict", "pytest-xdist", "ray", "scikit-learn (<1.6.0)", "tensorflow", "torch (>=2.0.0,<2.1.0)", "xgboost", "xgboost-ray"]
vizier = ["google-vizier (>=0.1.6)"]
ray_testing = ["ray[default] (>=2.4,<2.5.0 || >2.9.0,!=2.9.1,!=2.9.2,<2.10.0 || >=2.33.0,<2.34.0 || 2.42.0)", "ray[default] (>=2.5,<=2.42.0)"]
reasoningengine = ["cloudpickle (>=3.0,<4.0)", "google-cloud-trace (<2)", "opentelemetry-sdk (<2)", "opentelemetry-exporter-gcp-trace (<2)", "pydantic (>=2.11.1,<3)", "typing-extensions"]
tensorboard = ["tensorboard-plugin-profile (>=2.4.0,<2.18.0)", "werkzeug (>=2.0.0,<4.0.0)", "tensorflow (>=2.4.0,<3.0.0)", "tensorflow (>=2.3.0,<3.0.0)"]
testing = ["jsonschema", "explainable-ai-sdk (>=1.0.0)", "werkzeug (>=2.0.0,<4.0.0)", "uvicorn[standard] (>=0.16.0)", "fastapi (>=0.71.0,<=0.114.0)", "tensorflow (>=2.3.0,<3.0.0)", "google-cloud-bigquery-storage", "mlflow (>=1.27.0,<=2.16.0)", "setuptools (<70.0.0)", "immutabledict", "google-cloud-bigquery", "docker (>=5.0.3)", "httpx (>=0.23.0,<=0.28.1)", "starlette (>=0.17.1)", "urllib3 (>=1.21.1,<1.27)", "pyyaml (>=5.3.1,<7)", "requests-toolbelt (<=1.0.0)", "google-vizier (>=0.1.6)", "pandas (>=1.0.0)", "tensorboard-plugin-profile (>=2.4.0,<2.18.0)", "lit-nlp (==0.4.0)", "requests (>=2.28.1)", "pyarrow (>=6.0.1)", "tensorflow (>=2.4.0,<3.0.0)", "ruamel.yaml", "numpy (>=1.15.0)", "tqdm (>=4.23.0)", "sentencepiece (>=0.2.0)", "nltk", "aiohttp", "google-api-core (>=2.11,<3.0.0)", "grpcio-testing", "ipython", "kfp (>=2.6.0,<3.0.0)", "pytest-asyncio", "pytest-xdist", "protobuf (<=5.29.4)", "xgboost", "ray[default] (>=2.4,<2.5.0 || >2.9.0,!=2.9.1,!=2.9.2,<2.10.0 || >=2.33.0,<2.34.0 || 2.42.0)", "pyarrow (>=3.0.0,<8.0.0)", "scikit-learn (<1.6.0)", "tensorflow (>=2.3.0,<3.0.0)", "tensorflow (==2.14.1)", "torch (>=2.0.0,<2.1.0)", "ray[default] (>=2.5,<=2.42.0)", "pyarrow (>=10.0.1)", "scikit-learn", "tensorflow (==2.19.0)", "torch (>=2.2.0)", "bigframes", "pyarrow (>=14.0.0)"]
tokenization = ["sentencepiece (>=0.2.0)"]
xai = ["tensorflow (>=2.3.0,<3.0.0)"]

[[package]]
name = "google-cloud-bigquery"
version = "3.31.0"
description = "Google BigQuery API client library"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
google-api-core = {version = ">=2.11.1,<3.0.0", extras = ["grpc"]}
google-auth = ">=2.14.1,<3.0.0"
google-cloud-core = ">=2.4.1,<3.0.0"
google-resumable-media = ">=2.0.0,<3.0.0"
packaging = ">=24.2.0"
python-dateutil = ">=2.8.2,<3.0.0"
requests = ">=2.21.0,<3.0.0"

[package.extras]
all = ["google-cloud-bigquery"]
bigquery-v2 = ["proto-plus (>=1.22.3,<2.0.0)", "protobuf (>=3.20.2,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<7.0.0)"]
bqstorage = ["google-cloud-bigquery-storage (>=2.18.0,<3.0.0)", "grpcio (>=1.47.0,<2.0.0)", "pyarrow (>=4.0.0)", "grpcio (>=1.49.1,<2.0.0)"]
geopandas = ["geopandas (>=0.9.0,<2.0.0)", "Shapely (>=1.8.4,<3.0.0)"]
ipython = ["ipython (>=7.23.1)", "bigquery-magics (>=0.6.0)"]
ipywidgets = ["ipywidgets (>=7.7.1)", "ipykernel (>=6.2.0)"]
opentelemetry = ["opentelemetry-api (>=1.1.0)", "opentelemetry-sdk (>=1.1.0)", "opentelemetry-instrumentation (>=0.20b0)"]
pandas = ["pandas (>=1.1.4)", "pandas-gbq (>=0.26.1)", "grpcio (>=1.47.0,<2.0.0)", "pyarrow (>=3.0.0)", "db-dtypes (>=1.0.4,<2.0.0)", "grpcio (>=1.49.1,<2.0.0)"]
tqdm = ["tqdm (>=4.7.4,<5.0.0)"]

[[package]]
name = "google-cloud-core"
version = "2.4.3"
description = "Google Cloud API client core library"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
google-api-core = ">=1.31.6,<2.0.0 || >2.3.0,<3.0.0dev"
google-auth = ">=1.25.0,<3.0dev"

[package.extras]
grpc = ["grpcio (>=1.38.0,<2.0dev)", "grpcio-status (>=1.38.0,<2.0.dev0)"]

[[package]]
name = "google-cloud-resource-manager"
version = "1.14.2"
description = "Google Cloud Resource Manager API client library"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
google-api-core = {version = ">=1.34.1,<2.0.0 || >=2.11.0,<3.0.0", extras = ["grpc"]}
google-auth = ">=2.14.1,<2.24.0 || >2.24.0,<2.25.0 || >2.25.0,<3.0.0"
grpc-google-iam-v1 = ">=0.14.0,<1.0.0"
proto-plus = [
    {version = ">=1.22.3,<2.0.0", markers = "python_version < \"3.13\""},
    {version = ">=1.25.0,<2.0.0", markers = "python_version >= \"3.13\""},
]
protobuf = ">=3.20.2,<4.21.0 || >4.21.0,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0"

[[package]]
name = "google-cloud-storage"
version = "2.19.0"
description = "Google Cloud Storage API client library"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
google-api-core = ">=2.15.0,<3.0.0dev"
google-auth = ">=2.26.1,<3.0dev"
google-cloud-core = ">=2.3.0,<3.0dev"
google-crc32c = ">=1.0,<2.0dev"
google-resumable-media = ">=2.7.2"
requests = ">=2.18.0,<3.0.0dev"

[package.extras]
protobuf = ["protobuf (<6.0.0dev)"]
tracing = ["opentelemetry-api (>=1.1.0)"]

[[package]]
name = "google-crc32c"
version = "1.7.1"
description = "A python wrapper of the C library 'Google CRC32C'"
category = "main"
optional = false
python-versions = ">=3.9"

[package.extras]
testing = ["pytest"]

[[package]]
name = "google-genai"
version = "1.14.0"
description = "GenAI Python SDK"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
anyio = ">=4.8.0,<5.0.0"
google-auth = ">=2.14.1,<3.0.0"
httpx = ">=0.28.1,<1.0.0"
pydantic = ">=2.0.0,<3.0.0"
requests = ">=2.28.1,<3.0.0"
typing-extensions = ">=4.11.0,<5.0.0"
websockets = ">=13.0.0,<15.1.0"

[[package]]
name = "google-resumable-media"
version = "2.7.2"
description = "Utilities for Google Media Downloads and Resumable Uploads"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
google-crc32c = ">=1.0,<2.0dev"

[package.extras]
aiohttp = ["aiohttp (>=3.6.2,<4.0.0dev)", "google-auth (>=1.22.0,<2.0dev)"]
requests = ["requests (>=2.18.0,<3.0.0dev)"]

[[package]]
name = "googleapis-common-protos"
version = "1.70.0"
description = "Common protobufs used in Google APIs"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
grpcio = {version = ">=1.44.0,<2.0.0", optional = true, markers = "extra == \"grpc\""}
protobuf = ">=3.20.2,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0"

[package.extras]
grpc = ["grpcio (>=1.44.0,<2.0.0)"]

[[package]]
name = "grpc-google-iam-v1"
version = "0.14.2"
description = "IAM API client library"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
googleapis-common-protos = {version = ">=1.56.0,<2.0.0", extras = ["grpc"]}
grpcio = ">=1.44.0,<2.0.0"
protobuf = ">=3.20.2,<4.21.1 || >4.21.1,<4.21.2 || >4.21.2,<4.21.3 || >4.21.3,<4.21.4 || >4.21.4,<4.21.5 || >4.21.5,<7.0.0"

[[package]]
name = "grpcio"
version = "1.72.0"
description = "HTTP/2-based RPC framework"
category = "main"
optional = false
python-versions = ">=3.9"

[package.extras]
protobuf = ["grpcio-tools (>=1.72.0)"]

[[package]]
name = "grpcio-status"
version = "1.72.0"
description = "Status proto mapping for gRPC"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
googleapis-common-protos = ">=1.5.5"
grpcio = ">=1.72.0"
protobuf = ">=6.30.0,<7.0dev"

[[package]]
name = "h11"
version = "0.16.0"
description = "A pure-Python, bring-your-own-I/O implementation of HTTP/1.1"
category = "main"
optional = false
python-versions = ">=3.8"

[[package]]
name = "httpcore"
version = "1.0.9"
description = "A minimal low-level HTTP client."
category = "main"
optional = false
python-versions = ">=3.8"

[package.dependencies]
certifi = "*"
h11 = ">=0.16"

[package.extras]
asyncio = ["anyio (>=4.0,<5.0)"]
http2 = ["h2 (>=3,<5)"]
socks = ["socksio (>=1.0.0,<2.0.0)"]
trio = ["trio (>=0.22.0,<1.0)"]

[[package]]
name = "httpx"
version = "0.28.1"
description = "The next generation HTTP client."
category = "main"
optional = false
python-versions = ">=3.8"

[package.dependencies]
anyio = "*"
certifi = "*"
httpcore = ">=1.0.0,<2.0.0"
idna = "*"

[package.extras]
brotli = ["brotli", "brotlicffi"]
cli = ["click (>=8.0.0,<9.0.0)", "pygments (>=2.0.0,<3.0.0)", "rich (>=10,<14)"]
http2 = ["h2 (>=3,<5)"]
socks = ["socksio (>=1.0.0,<2.0.0)"]
zstd = ["zstandard (>=0.18.0)"]

[[package]]
name = "idna"
version = "3.10"
description = "Internationalized Domain Names in Applications (IDNA)"
category = "main"
optional = false
python-versions = ">=3.6"

[package.extras]
all = ["ruff (>=0.6.2)", "mypy (>=1.11.2)", "pytest (>=8.3.2)", "flake8 (>=7.1.1)"]

[[package]]
name = "isort"
version = "5.13.2"
description = "A Python utility / library to sort Python imports."
category = "dev"
optional = false
python-versions = ">=3.8.0"

[package.extras]
colors = ["colorama (>=0.4.6)"]

[[package]]
name = "joblib"
version = "1.5.0"
description = "Lightweight pipelining with Python functions"
category = "main"
optional = false
python-versions = ">=3.9"

[[package]]
name = "markdown-it-py"
version = "3.0.0"
description = "Python port of markdown-it. Markdown parsing, done right!"
category = "main"
optional = false
python-versions = ">=3.8"

[package.dependencies]
mdurl = ">=0.1,<1.0"

[package.extras]
benchmarking = ["psutil", "pytest", "pytest-benchmark"]
code_style = ["pre-commit (>=3.0,<4.0)"]
compare = ["commonmark (>=0.9,<1.0)", "markdown (>=3.4,<4.0)", "mistletoe (>=1.0,<2.0)", "mistune (>=2.0,<3.0)", "panflute (>=2.3,<3.0)"]
linkify = ["linkify-it-py (>=1,<3)"]
plugins = ["mdit-py-plugins"]
profiling = ["gprof2dot"]
rtd = ["mdit-py-plugins", "myst-parser", "pyyaml", "sphinx", "sphinx-copybutton", "sphinx-design", "sphinx-book-theme", "jupyter-sphinx"]
testing = ["coverage", "pytest", "pytest-cov", "pytest-regressions"]

[[package]]
name = "mccabe"
version = "0.7.0"
description = "McCabe checker, plugin for flake8"
category = "dev"
optional = false
python-versions = ">=3.6"

[[package]]
name = "mdurl"
version = "0.1.2"
description = "Markdown URL utilities"
category = "main"
optional = false
python-versions = ">=3.7"

[[package]]
name = "mypy-extensions"
version = "1.1.0"
description = "Type system extensions for programs checked with the mypy type checker."
category = "dev"
optional = false
python-versions = ">=3.8"

[[package]]
name = "numpy"
version = "2.2.5"
description = "Fundamental package for array computing in Python"
category = "main"
optional = false
python-versions = ">=3.10"

[[package]]
name = "packaging"
version = "25.0"
description = "Core utilities for Python packages"
category = "main"
optional = false
python-versions = ">=3.8"

[[package]]
name = "pandas"
version = "2.2.3"
description = "Powerful data structures for data analysis, time series, and statistics"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
numpy = [
    {version = ">=1.22.4", markers = "python_version < \"3.11\""},
    {version = ">=1.23.2", markers = "python_version == \"3.11\""},
    {version = ">=1.26.0", markers = "python_version >= \"3.12\""},
]
python-dateutil = ">=2.8.2"
pytz = ">=2020.1"
tzdata = ">=2022.7"

[package.extras]
test = ["hypothesis (>=6.46.1)", "pytest (>=7.3.2)", "pytest-xdist (>=2.2.0)"]
pyarrow = ["pyarrow (>=10.0.1)"]
performance = ["bottleneck (>=1.3.6)", "numba (>=0.56.4)", "numexpr (>=2.8.4)"]
computation = ["scipy (>=1.10.0)", "xarray (>=2022.12.0)"]
fss = ["fsspec (>=2022.11.0)"]
aws = ["s3fs (>=2022.11.0)"]
gcp = ["gcsfs (>=2022.11.0)", "pandas-gbq (>=0.19.0)"]
excel = ["odfpy (>=1.4.1)", "openpyxl (>=3.1.0)", "python-calamine (>=0.1.7)", "pyxlsb (>=1.0.10)", "xlrd (>=2.0.1)", "xlsxwriter (>=3.0.5)"]
parquet = ["pyarrow (>=10.0.1)"]
feather = ["pyarrow (>=10.0.1)"]
hdf5 = ["tables (>=3.8.0)"]
spss = ["pyreadstat (>=1.2.0)"]
postgresql = ["SQLAlchemy (>=2.0.0)", "psycopg2 (>=2.9.6)", "adbc-driver-postgresql (>=0.8.0)"]
mysql = ["SQLAlchemy (>=2.0.0)", "pymysql (>=1.0.2)"]
sql-other = ["SQLAlchemy (>=2.0.0)", "adbc-driver-postgresql (>=0.8.0)", "adbc-driver-sqlite (>=0.8.0)"]
html = ["beautifulsoup4 (>=4.11.2)", "html5lib (>=1.1)", "lxml (>=4.9.2)"]
xml = ["lxml (>=4.9.2)"]
plot = ["matplotlib (>=3.6.3)"]
output-formatting = ["jinja2 (>=3.1.2)", "tabulate (>=0.9.0)"]
clipboard = ["PyQt5 (>=5.15.9)", "qtpy (>=2.3.0)"]
compression = ["zstandard (>=0.19.0)"]
consortium-standard = ["dataframe-api-compat (>=0.1.7)"]
all = ["adbc-driver-postgresql (>=0.8.0)", "adbc-driver-sqlite (>=0.8.0)", "beautifulsoup4 (>=4.11.2)", "bottleneck (>=1.3.6)", "dataframe-api-compat (>=0.1.7)", "fastparquet (>=2022.12.0)", "fsspec (>=2022.11.0)", "gcsfs (>=2022.11.0)", "html5lib (>=1.1)", "hypothesis (>=6.46.1)", "jinja2 (>=3.1.2)", "lxml (>=4.9.2)", "matplotlib (>=3.6.3)", "numba (>=0.56.4)", "numexpr (>=2.8.4)", "odfpy (>=1.4.1)", "openpyxl (>=3.1.0)", "pandas-gbq (>=0.19.0)", "psycopg2 (>=2.9.6)", "pyarrow (>=10.0.1)", "pymysql (>=1.0.2)", "PyQt5 (>=5.15.9)", "pyreadstat (>=1.2.0)", "pytest (>=7.3.2)", "pytest-xdist (>=2.2.0)", "python-calamine (>=0.1.7)", "pyxlsb (>=1.0.10)", "qtpy (>=2.3.0)", "scipy (>=1.10.0)", "s3fs (>=2022.11.0)", "SQLAlchemy (>=2.0.0)", "tables (>=3.8.0)", "tabulate (>=0.9.0)", "xarray (>=2022.12.0)", "xlrd (>=2.0.1)", "xlsxwriter (>=3.0.5)", "zstandard (>=0.19.0)"]

[[package]]
name = "pathspec"
version = "0.12.1"
description = "Utility library for gitignore style pattern matching of file paths."
category = "dev"
optional = false
python-versions = ">=3.8"

[[package]]
name = "pipenv"
version = "2023.12.1"
description = "Python Development Workflow for Humans."
category = "dev"
optional = false
python-versions = ">=3.8"

[package.dependencies]
certifi = "*"
virtualenv = ">=20.24.2"

[package.extras]
dev = ["beautifulsoup4", "black (==23.3)", "flake8 (>=3.3,<4.0)", "invoke", "parver", "sphinx", "towncrier"]
tests = ["flaky", "mock", "pytest (>=5)", "pytest-timeout", "pytest-xdist"]

[[package]]
name = "platformdirs"
version = "4.3.8"
description = "A small Python package for determining appropriate platform-specific dirs, e.g. a `user data dir`."
category = "dev"
optional = false
python-versions = ">=3.9"

[package.extras]
docs = ["furo (>=2024.8.6)", "proselint (>=0.14)", "sphinx-autodoc-typehints (>=3)", "sphinx (>=8.1.3)"]
test = ["appdirs (==1.4.4)", "covdefaults (>=2.3)", "pytest-cov (>=6)", "pytest-mock (>=3.14)", "pytest (>=8.3.4)"]
type = ["mypy (>=1.14.1)"]

[[package]]
name = "proto-plus"
version = "1.26.1"
description = "Beautiful, Pythonic protocol buffers"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
protobuf = ">=3.19.0,<7.0.0"

[package.extras]
testing = ["google-api-core (>=1.31.5)"]

[[package]]
name = "protobuf"
version = "6.30.2"
description = ""
category = "main"
optional = false
python-versions = ">=3.9"

[[package]]
name = "pyasn1"
version = "0.6.1"
description = "Pure-Python implementation of ASN.1 types and DER/BER/CER codecs (X.208)"
category = "main"
optional = false
python-versions = ">=3.8"

[[package]]
name = "pyasn1-modules"
version = "0.4.2"
description = "A collection of ASN.1-based protocols modules"
category = "main"
optional = false
python-versions = ">=3.8"

[package.dependencies]
pyasn1 = ">=0.6.1,<0.7.0"

[[package]]
name = "pycodestyle"
version = "2.13.0"
description = "Python style guide checker"
category = "dev"
optional = false
python-versions = ">=3.9"

[[package]]
name = "pydantic"
version = "2.11.4"
description = "Data validation using Python type hints"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
annotated-types = ">=0.6.0"
pydantic-core = "2.33.2"
typing-extensions = ">=4.12.2"
typing-inspection = ">=0.4.0"

[package.extras]
email = ["email-validator (>=2.0.0)"]
timezone = ["tzdata"]

[[package]]
name = "pydantic-core"
version = "2.33.2"
description = "Core functionality for Pydantic validation and serialization"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
typing-extensions = ">=4.6.0,<4.7.0 || >4.7.0"

[[package]]
name = "pyflakes"
version = "3.3.2"
description = "passive checker of Python programs"
category = "dev"
optional = false
python-versions = ">=3.9"

[[package]]
name = "pygments"
version = "2.19.1"
description = "Pygments is a syntax highlighting package written in Python."
category = "main"
optional = false
python-versions = ">=3.8"

[package.extras]
windows-terminal = ["colorama (>=0.4.6)"]

[[package]]
name = "python-dateutil"
version = "2.9.0.post0"
description = "Extensions to the standard Python datetime module"
category = "main"
optional = false
python-versions = "!=3.0.*,!=3.1.*,!=3.2.*,>=2.7"

[package.dependencies]
six = ">=1.5"

[[package]]
name = "python-dotenv"
version = "1.1.0"
description = "Read key-value pairs from a .env file and set them as environment variables"
category = "main"
optional = false
python-versions = ">=3.9"

[package.extras]
cli = ["click (>=5.0)"]

[[package]]
name = "pytz"
version = "2025.2"
description = "World timezone definitions, modern and historical"
category = "main"
optional = false
python-versions = "*"

[[package]]
name = "requests"
version = "2.32.3"
description = "Python HTTP for Humans."
category = "main"
optional = false
python-versions = ">=3.8"

[package.dependencies]
certifi = ">=2017.4.17"
charset-normalizer = ">=2,<4"
idna = ">=2.5,<4"
urllib3 = ">=1.21.1,<3"

[package.extras]
socks = ["PySocks (>=1.5.6,!=1.5.7)"]
use-chardet-on-py3 = ["chardet (>=3.0.2,<6)"]

[[package]]
name = "rich"
version = "14.0.0"
description = "Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal"
category = "main"
optional = false
python-versions = ">=3.8.0"

[package.dependencies]
markdown-it-py = ">=2.2.0"
pygments = ">=2.13.0,<3.0.0"
typing-extensions = {version = ">=4.0.0,<5.0", markers = "python_version < \"3.11\""}

[package.extras]
jupyter = ["ipywidgets (>=7.5.1,<9)"]

[[package]]
name = "rsa"
version = "4.9.1"
description = "Pure-Python RSA implementation"
category = "main"
optional = false
python-versions = "<4,>=3.6"

[package.dependencies]
pyasn1 = ">=0.1.3"

[[package]]
name = "scikit-learn"
version = "1.6.1"
description = "A set of python modules for machine learning and data mining"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
joblib = ">=1.2.0"
numpy = ">=1.19.5"
scipy = ">=1.6.0"
threadpoolctl = ">=3.1.0"

[package.extras]
build = ["numpy (>=1.19.5)", "scipy (>=1.6.0)", "cython (>=3.0.10)", "meson-python (>=0.16.0)"]
install = ["numpy (>=1.19.5)", "scipy (>=1.6.0)", "joblib (>=1.2.0)", "threadpoolctl (>=3.1.0)"]
benchmark = ["matplotlib (>=3.3.4)", "pandas (>=1.1.5)", "memory_profiler (>=0.57.0)"]
docs = ["matplotlib (>=3.3.4)", "scikit-image (>=0.17.2)", "pandas (>=1.1.5)", "seaborn (>=0.9.0)", "memory_profiler (>=0.57.0)", "sphinx (>=7.3.7)", "sphinx-copybutton (>=0.5.2)", "sphinx-gallery (>=0.17.1)", "numpydoc (>=1.2.0)", "Pillow (>=7.1.2)", "pooch (>=1.6.0)", "sphinx-prompt (>=1.4.0)", "sphinxext-opengraph (>=0.9.1)", "plotly (>=5.14.0)", "polars (>=0.20.30)", "sphinx-design (>=0.5.0)", "sphinx-design (>=0.6.0)", "sphinxcontrib-sass (>=0.3.4)", "pydata-sphinx-theme (>=0.15.3)", "sphinx-remove-toctrees (>=1.0.0.post1)", "towncrier (>=24.8.0)"]
examples = ["matplotlib (>=3.3.4)", "scikit-image (>=0.17.2)", "pandas (>=1.1.5)", "seaborn (>=0.9.0)", "pooch (>=1.6.0)", "plotly (>=5.14.0)"]
tests = ["matplotlib (>=3.3.4)", "scikit-image (>=0.17.2)", "pandas (>=1.1.5)", "pytest (>=7.1.2)", "pytest-cov (>=2.9.0)", "ruff (>=0.5.1)", "black (>=24.3.0)", "mypy (>=1.9)", "pyamg (>=4.0.0)", "polars (>=0.20.30)", "pyarrow (>=12.0.0)", "numpydoc (>=1.2.0)", "pooch (>=1.6.0)"]
maintenance = ["conda-lock (==2.5.6)"]

[[package]]
name = "scipy"
version = "1.15.3"
description = "Fundamental algorithms for scientific computing in Python"
category = "main"
optional = false
python-versions = ">=3.10"

[package.dependencies]
numpy = ">=1.23.5,<2.5"

[package.extras]
test = ["pytest", "pytest-cov", "pytest-timeout", "pytest-xdist", "asv", "mpmath", "gmpy2", "threadpoolctl", "scikit-umfpack", "pooch", "hypothesis (>=6.30)", "array-api-strict (>=2.0,<2.1.1)", "cython", "meson", "ninja"]
doc = ["sphinx (>=5.0.0,<8.0.0)", "intersphinx-registry", "pydata-sphinx-theme (>=0.15.2)", "sphinx-copybutton", "sphinx-design (>=0.4.0)", "matplotlib (>=3.5)", "numpydoc", "jupytext", "myst-nb", "pooch", "jupyterlite-sphinx (>=0.19.1)", "jupyterlite-pyodide-kernel"]
dev = ["mypy (==1.10.0)", "typing-extensions", "types-psutil", "pycodestyle", "ruff (>=0.0.292)", "cython-lint (>=0.12.2)", "rich-click", "doit (>=0.36.0)", "pydevtool"]

[[package]]
name = "shapely"
version = "2.1.0"
description = "Manipulation and analysis of geometric objects"
category = "main"
optional = false
python-versions = ">=3.10"

[package.dependencies]
numpy = ">=1.21"

[package.extras]
test = ["pytest", "pytest-cov", "scipy-doctest"]
docs = ["numpydoc (>=1.1.0,<1.2.0)", "matplotlib", "sphinx", "sphinx-book-theme", "sphinx-remove-toctrees"]

[[package]]
name = "six"
version = "1.17.0"
description = "Python 2 and 3 compatibility utilities"
category = "main"
optional = false
python-versions = "!=3.0.*,!=3.1.*,!=3.2.*,>=2.7"

[[package]]
name = "sniffio"
version = "1.3.1"
description = "Sniff out which async library your code is running under"
category = "main"
optional = false
python-versions = ">=3.7"

[[package]]
name = "threadpoolctl"
version = "3.6.0"
description = "threadpoolctl"
category = "main"
optional = false
python-versions = ">=3.9"

[[package]]
name = "tomli"
version = "2.2.1"
description = "A lil' TOML parser"
category = "dev"
optional = false
python-versions = ">=3.8"

[[package]]
name = "tqdm"
version = "4.67.1"
description = "Fast, Extensible Progress Meter"
category = "main"
optional = false
python-versions = ">=3.7"

[package.dependencies]
colorama = {version = "*", markers = "platform_system == \"Windows\""}

[package.extras]
dev = ["pytest (>=6)", "pytest-cov", "pytest-timeout", "pytest-asyncio (>=0.24)", "nbval"]
discord = ["requests"]
slack = ["slack-sdk"]
telegram = ["requests"]
notebook = ["ipywidgets (>=6)"]

[[package]]
name = "typing-extensions"
version = "4.13.2"
description = "Backported and Experimental Type Hints for Python 3.8+"
category = "main"
optional = false
python-versions = ">=3.8"

[[package]]
name = "typing-inspection"
version = "0.4.0"
description = "Runtime typing introspection tools"
category = "main"
optional = false
python-versions = ">=3.9"

[package.dependencies]
typing-extensions = ">=4.12.0"

[[package]]
name = "tzdata"
version = "2025.2"
description = "Provider of IANA time zone data"
category = "main"
optional = false
python-versions = ">=2"

[[package]]
name = "urllib3"
version = "2.4.0"
description = "HTTP library with thread-safe connection pooling, file post, and more."
category = "main"
optional = false
python-versions = ">=3.9"

[package.extras]
brotli = ["brotli (>=1.0.9)", "brotlicffi (>=0.8.0)"]
h2 = ["h2 (>=4,<5)"]
socks = ["pysocks (>=1.5.6,!=1.5.7,<2.0)"]
zstd = ["zstandard (>=0.18.0)"]

[[package]]
name = "vertexai"
version = "0.0.1"
description = "Please run pip install google-cloud-aiplatform to use the Vertex SDK."
category = "main"
optional = false
python-versions = ">=3.7"

[[package]]
name = "virtualenv"
version = "20.31.2"
description = "Virtual Python Environment builder"
category = "dev"
optional = false
python-versions = ">=3.8"

[package.dependencies]
distlib = ">=0.3.7,<1"
filelock = ">=3.12.2,<4"
platformdirs = ">=3.9.1,<5"

[package.extras]
docs = ["furo (>=2023.7.26)", "proselint (>=0.13)", "sphinx (>=7.1.2,!=7.3)", "sphinx-argparse (>=0.4)", "sphinxcontrib-towncrier (>=0.2.1a0)", "towncrier (>=23.6)"]
test = ["covdefaults (>=2.3)", "coverage-enable-subprocess (>=1)", "coverage (>=7.2.7)", "flaky (>=3.7)", "packaging (>=23.1)", "pytest-env (>=0.8.2)", "pytest-freezer (>=0.4.8)", "pytest-mock (>=3.11.1)", "pytest-randomly (>=3.12)", "pytest-timeout (>=2.1)", "pytest (>=7.4)", "setuptools (>=68)", "time-machine (>=2.10)"]

[[package]]
name = "websockets"
version = "15.0.1"
description = "An implementation of the WebSocket Protocol (RFC 6455 & 7692)"
category = "main"
optional = false
python-versions = ">=3.9"

[metadata]
lock-version = "1.1"
python-versions = "^3.10"
content-hash = "f389c31a4cb76df198cfec7c912ef6311f7e0af4b509af2223c1db63fa4a965a"

[metadata.files]
annotated-types = []
anyio = []
black = []
cachetools = []
certifi = []
charset-normalizer = []
click = []
colorama = []
distlib = []
docstring-parser = []
exceptiongroup = []
filelock = []
flake8 = []
google-api-core = []
google-auth = []
google-cloud-aiplatform = []
google-cloud-bigquery = []
google-cloud-core = []
google-cloud-resource-manager = []
google-cloud-storage = []
google-crc32c = []
google-genai = []
google-resumable-media = []
googleapis-common-protos = []
grpc-google-iam-v1 = []
grpcio = []
grpcio-status = []
h11 = []
httpcore = []
httpx = []
idna = []
isort = []
joblib = []
markdown-it-py = []
mccabe = []
mdurl = []
mypy-extensions = []
numpy = []
packaging = []
pandas = []
pathspec = []
pipenv = []
platformdirs = []
proto-plus = []
protobuf = []
pyasn1 = []
pyasn1-modules = []
pycodestyle = []
pydantic = []
pydantic-core = []
pyflakes = []
pygments = []
python-dateutil = []
python-dotenv = []
pytz = []
requests = []
rich = []
rsa = []
scikit-learn = []
scipy = []
shapely = []
six = []
sniffio = []
threadpoolctl = []
tomli = []
tqdm = []
typing-extensions = []
typing-inspection = []
tzdata = []
urllib3 = []
vertexai = []
virtualenv = []
websockets = []
